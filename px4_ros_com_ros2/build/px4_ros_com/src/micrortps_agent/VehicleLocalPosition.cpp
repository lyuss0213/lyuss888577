// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file VehicleLocalPosition.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "VehicleLocalPosition.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>






px4_msgs::msg::VehicleLocalPosition::VehicleLocalPosition()
{
    // m_timestamp com.eprosima.idl.parser.typecode.PrimitiveTypeCode@3ba987b8
    m_timestamp = 0;
    // m_timestamp_sample com.eprosima.idl.parser.typecode.PrimitiveTypeCode@3f191845
    m_timestamp_sample = 0;
    // m_xy_valid com.eprosima.idl.parser.typecode.PrimitiveTypeCode@5f049ea1
    m_xy_valid = false;
    // m_z_valid com.eprosima.idl.parser.typecode.PrimitiveTypeCode@72cc7e6f
    m_z_valid = false;
    // m_v_xy_valid com.eprosima.idl.parser.typecode.PrimitiveTypeCode@5afa3c9
    m_v_xy_valid = false;
    // m_v_z_valid com.eprosima.idl.parser.typecode.PrimitiveTypeCode@72035809
    m_v_z_valid = false;
    // m_x com.eprosima.idl.parser.typecode.PrimitiveTypeCode@909217e
    m_x = 0.0;
    // m_y com.eprosima.idl.parser.typecode.PrimitiveTypeCode@18271936
    m_y = 0.0;
    // m_z com.eprosima.idl.parser.typecode.PrimitiveTypeCode@606e4010
    m_z = 0.0;
    // m_delta_xy com.eprosima.idl.parser.typecode.AliasTypeCode@8458f04
    memset(&m_delta_xy, 0, (2) * 4);
    // m_xy_reset_counter com.eprosima.idl.parser.typecode.PrimitiveTypeCode@48075da3
    m_xy_reset_counter = 0;
    // m_delta_z com.eprosima.idl.parser.typecode.PrimitiveTypeCode@68c9133c
    m_delta_z = 0.0;
    // m_z_reset_counter com.eprosima.idl.parser.typecode.PrimitiveTypeCode@7a35b0f5
    m_z_reset_counter = 0;
    // m_vx com.eprosima.idl.parser.typecode.PrimitiveTypeCode@5e2c3d18
    m_vx = 0.0;
    // m_vy com.eprosima.idl.parser.typecode.PrimitiveTypeCode@2cb4893b
    m_vy = 0.0;
    // m_vz com.eprosima.idl.parser.typecode.PrimitiveTypeCode@cc43f62
    m_vz = 0.0;
    // m_z_deriv com.eprosima.idl.parser.typecode.PrimitiveTypeCode@5b218417
    m_z_deriv = 0.0;
    // m_delta_vxy com.eprosima.idl.parser.typecode.AliasTypeCode@8458f04
    memset(&m_delta_vxy, 0, (2) * 4);
    // m_vxy_reset_counter com.eprosima.idl.parser.typecode.PrimitiveTypeCode@645aa696
    m_vxy_reset_counter = 0;
    // m_delta_vz com.eprosima.idl.parser.typecode.PrimitiveTypeCode@6caf0677
    m_delta_vz = 0.0;
    // m_vz_reset_counter com.eprosima.idl.parser.typecode.PrimitiveTypeCode@413d1baf
    m_vz_reset_counter = 0;
    // m_ax com.eprosima.idl.parser.typecode.PrimitiveTypeCode@16eb3ea3
    m_ax = 0.0;
    // m_ay com.eprosima.idl.parser.typecode.PrimitiveTypeCode@273444fe
    m_ay = 0.0;
    // m_az com.eprosima.idl.parser.typecode.PrimitiveTypeCode@33bc72d1
    m_az = 0.0;
    // m_heading com.eprosima.idl.parser.typecode.PrimitiveTypeCode@1a75e76a
    m_heading = 0.0;
    // m_delta_heading com.eprosima.idl.parser.typecode.PrimitiveTypeCode@5524cca1
    m_delta_heading = 0.0;
    // m_heading_reset_counter com.eprosima.idl.parser.typecode.PrimitiveTypeCode@5032714f
    m_heading_reset_counter = 0;
    // m_heading_good_for_control com.eprosima.idl.parser.typecode.PrimitiveTypeCode@48bb62
    m_heading_good_for_control = false;
    // m_xy_global com.eprosima.idl.parser.typecode.PrimitiveTypeCode@353352b6
    m_xy_global = false;
    // m_z_global com.eprosima.idl.parser.typecode.PrimitiveTypeCode@4681c175
    m_z_global = false;
    // m_ref_timestamp com.eprosima.idl.parser.typecode.PrimitiveTypeCode@57a78e3
    m_ref_timestamp = 0;
    // m_ref_lat com.eprosima.idl.parser.typecode.PrimitiveTypeCode@402c4085
    m_ref_lat = 0.0;
    // m_ref_lon com.eprosima.idl.parser.typecode.PrimitiveTypeCode@6fa51cd4
    m_ref_lon = 0.0;
    // m_ref_alt com.eprosima.idl.parser.typecode.PrimitiveTypeCode@2767e23c
    m_ref_alt = 0.0;
    // m_dist_bottom com.eprosima.idl.parser.typecode.PrimitiveTypeCode@710c2b53
    m_dist_bottom = 0.0;
    // m_dist_bottom_valid com.eprosima.idl.parser.typecode.PrimitiveTypeCode@5386659f
    m_dist_bottom_valid = false;
    // m_dist_bottom_sensor_bitfield com.eprosima.idl.parser.typecode.PrimitiveTypeCode@14028087
    m_dist_bottom_sensor_bitfield = 0;
    // m_eph com.eprosima.idl.parser.typecode.PrimitiveTypeCode@cecf639
    m_eph = 0.0;
    // m_epv com.eprosima.idl.parser.typecode.PrimitiveTypeCode@1caa0244
    m_epv = 0.0;
    // m_evh com.eprosima.idl.parser.typecode.PrimitiveTypeCode@7ce026d3
    m_evh = 0.0;
    // m_evv com.eprosima.idl.parser.typecode.PrimitiveTypeCode@7ce69770
    m_evv = 0.0;
    // m_vxy_max com.eprosima.idl.parser.typecode.PrimitiveTypeCode@1750fbeb
    m_vxy_max = 0.0;
    // m_vz_max com.eprosima.idl.parser.typecode.PrimitiveTypeCode@5b247367
    m_vz_max = 0.0;
    // m_hagl_min com.eprosima.idl.parser.typecode.PrimitiveTypeCode@268f106e
    m_hagl_min = 0.0;
    // m_hagl_max com.eprosima.idl.parser.typecode.PrimitiveTypeCode@6e9a5ed8
    m_hagl_max = 0.0;

}

px4_msgs::msg::VehicleLocalPosition::~VehicleLocalPosition()
{













































}

px4_msgs::msg::VehicleLocalPosition::VehicleLocalPosition(const VehicleLocalPosition &x)
{
    m_timestamp = x.m_timestamp;
    m_timestamp_sample = x.m_timestamp_sample;
    m_xy_valid = x.m_xy_valid;
    m_z_valid = x.m_z_valid;
    m_v_xy_valid = x.m_v_xy_valid;
    m_v_z_valid = x.m_v_z_valid;
    m_x = x.m_x;
    m_y = x.m_y;
    m_z = x.m_z;
    m_delta_xy = x.m_delta_xy;
    m_xy_reset_counter = x.m_xy_reset_counter;
    m_delta_z = x.m_delta_z;
    m_z_reset_counter = x.m_z_reset_counter;
    m_vx = x.m_vx;
    m_vy = x.m_vy;
    m_vz = x.m_vz;
    m_z_deriv = x.m_z_deriv;
    m_delta_vxy = x.m_delta_vxy;
    m_vxy_reset_counter = x.m_vxy_reset_counter;
    m_delta_vz = x.m_delta_vz;
    m_vz_reset_counter = x.m_vz_reset_counter;
    m_ax = x.m_ax;
    m_ay = x.m_ay;
    m_az = x.m_az;
    m_heading = x.m_heading;
    m_delta_heading = x.m_delta_heading;
    m_heading_reset_counter = x.m_heading_reset_counter;
    m_heading_good_for_control = x.m_heading_good_for_control;
    m_xy_global = x.m_xy_global;
    m_z_global = x.m_z_global;
    m_ref_timestamp = x.m_ref_timestamp;
    m_ref_lat = x.m_ref_lat;
    m_ref_lon = x.m_ref_lon;
    m_ref_alt = x.m_ref_alt;
    m_dist_bottom = x.m_dist_bottom;
    m_dist_bottom_valid = x.m_dist_bottom_valid;
    m_dist_bottom_sensor_bitfield = x.m_dist_bottom_sensor_bitfield;
    m_eph = x.m_eph;
    m_epv = x.m_epv;
    m_evh = x.m_evh;
    m_evv = x.m_evv;
    m_vxy_max = x.m_vxy_max;
    m_vz_max = x.m_vz_max;
    m_hagl_min = x.m_hagl_min;
    m_hagl_max = x.m_hagl_max;
}

px4_msgs::msg::VehicleLocalPosition::VehicleLocalPosition(VehicleLocalPosition &&x)
{
    m_timestamp = x.m_timestamp;
    m_timestamp_sample = x.m_timestamp_sample;
    m_xy_valid = x.m_xy_valid;
    m_z_valid = x.m_z_valid;
    m_v_xy_valid = x.m_v_xy_valid;
    m_v_z_valid = x.m_v_z_valid;
    m_x = x.m_x;
    m_y = x.m_y;
    m_z = x.m_z;
    m_delta_xy = std::move(x.m_delta_xy);
    m_xy_reset_counter = x.m_xy_reset_counter;
    m_delta_z = x.m_delta_z;
    m_z_reset_counter = x.m_z_reset_counter;
    m_vx = x.m_vx;
    m_vy = x.m_vy;
    m_vz = x.m_vz;
    m_z_deriv = x.m_z_deriv;
    m_delta_vxy = std::move(x.m_delta_vxy);
    m_vxy_reset_counter = x.m_vxy_reset_counter;
    m_delta_vz = x.m_delta_vz;
    m_vz_reset_counter = x.m_vz_reset_counter;
    m_ax = x.m_ax;
    m_ay = x.m_ay;
    m_az = x.m_az;
    m_heading = x.m_heading;
    m_delta_heading = x.m_delta_heading;
    m_heading_reset_counter = x.m_heading_reset_counter;
    m_heading_good_for_control = x.m_heading_good_for_control;
    m_xy_global = x.m_xy_global;
    m_z_global = x.m_z_global;
    m_ref_timestamp = x.m_ref_timestamp;
    m_ref_lat = x.m_ref_lat;
    m_ref_lon = x.m_ref_lon;
    m_ref_alt = x.m_ref_alt;
    m_dist_bottom = x.m_dist_bottom;
    m_dist_bottom_valid = x.m_dist_bottom_valid;
    m_dist_bottom_sensor_bitfield = x.m_dist_bottom_sensor_bitfield;
    m_eph = x.m_eph;
    m_epv = x.m_epv;
    m_evh = x.m_evh;
    m_evv = x.m_evv;
    m_vxy_max = x.m_vxy_max;
    m_vz_max = x.m_vz_max;
    m_hagl_min = x.m_hagl_min;
    m_hagl_max = x.m_hagl_max;
}

px4_msgs::msg::VehicleLocalPosition& px4_msgs::msg::VehicleLocalPosition::operator=(const VehicleLocalPosition &x)
{

    m_timestamp = x.m_timestamp;
    m_timestamp_sample = x.m_timestamp_sample;
    m_xy_valid = x.m_xy_valid;
    m_z_valid = x.m_z_valid;
    m_v_xy_valid = x.m_v_xy_valid;
    m_v_z_valid = x.m_v_z_valid;
    m_x = x.m_x;
    m_y = x.m_y;
    m_z = x.m_z;
    m_delta_xy = x.m_delta_xy;
    m_xy_reset_counter = x.m_xy_reset_counter;
    m_delta_z = x.m_delta_z;
    m_z_reset_counter = x.m_z_reset_counter;
    m_vx = x.m_vx;
    m_vy = x.m_vy;
    m_vz = x.m_vz;
    m_z_deriv = x.m_z_deriv;
    m_delta_vxy = x.m_delta_vxy;
    m_vxy_reset_counter = x.m_vxy_reset_counter;
    m_delta_vz = x.m_delta_vz;
    m_vz_reset_counter = x.m_vz_reset_counter;
    m_ax = x.m_ax;
    m_ay = x.m_ay;
    m_az = x.m_az;
    m_heading = x.m_heading;
    m_delta_heading = x.m_delta_heading;
    m_heading_reset_counter = x.m_heading_reset_counter;
    m_heading_good_for_control = x.m_heading_good_for_control;
    m_xy_global = x.m_xy_global;
    m_z_global = x.m_z_global;
    m_ref_timestamp = x.m_ref_timestamp;
    m_ref_lat = x.m_ref_lat;
    m_ref_lon = x.m_ref_lon;
    m_ref_alt = x.m_ref_alt;
    m_dist_bottom = x.m_dist_bottom;
    m_dist_bottom_valid = x.m_dist_bottom_valid;
    m_dist_bottom_sensor_bitfield = x.m_dist_bottom_sensor_bitfield;
    m_eph = x.m_eph;
    m_epv = x.m_epv;
    m_evh = x.m_evh;
    m_evv = x.m_evv;
    m_vxy_max = x.m_vxy_max;
    m_vz_max = x.m_vz_max;
    m_hagl_min = x.m_hagl_min;
    m_hagl_max = x.m_hagl_max;

    return *this;
}

px4_msgs::msg::VehicleLocalPosition& px4_msgs::msg::VehicleLocalPosition::operator=(VehicleLocalPosition &&x)
{

    m_timestamp = x.m_timestamp;
    m_timestamp_sample = x.m_timestamp_sample;
    m_xy_valid = x.m_xy_valid;
    m_z_valid = x.m_z_valid;
    m_v_xy_valid = x.m_v_xy_valid;
    m_v_z_valid = x.m_v_z_valid;
    m_x = x.m_x;
    m_y = x.m_y;
    m_z = x.m_z;
    m_delta_xy = std::move(x.m_delta_xy);
    m_xy_reset_counter = x.m_xy_reset_counter;
    m_delta_z = x.m_delta_z;
    m_z_reset_counter = x.m_z_reset_counter;
    m_vx = x.m_vx;
    m_vy = x.m_vy;
    m_vz = x.m_vz;
    m_z_deriv = x.m_z_deriv;
    m_delta_vxy = std::move(x.m_delta_vxy);
    m_vxy_reset_counter = x.m_vxy_reset_counter;
    m_delta_vz = x.m_delta_vz;
    m_vz_reset_counter = x.m_vz_reset_counter;
    m_ax = x.m_ax;
    m_ay = x.m_ay;
    m_az = x.m_az;
    m_heading = x.m_heading;
    m_delta_heading = x.m_delta_heading;
    m_heading_reset_counter = x.m_heading_reset_counter;
    m_heading_good_for_control = x.m_heading_good_for_control;
    m_xy_global = x.m_xy_global;
    m_z_global = x.m_z_global;
    m_ref_timestamp = x.m_ref_timestamp;
    m_ref_lat = x.m_ref_lat;
    m_ref_lon = x.m_ref_lon;
    m_ref_alt = x.m_ref_alt;
    m_dist_bottom = x.m_dist_bottom;
    m_dist_bottom_valid = x.m_dist_bottom_valid;
    m_dist_bottom_sensor_bitfield = x.m_dist_bottom_sensor_bitfield;
    m_eph = x.m_eph;
    m_epv = x.m_epv;
    m_evh = x.m_evh;
    m_evv = x.m_evv;
    m_vxy_max = x.m_vxy_max;
    m_vz_max = x.m_vz_max;
    m_hagl_min = x.m_hagl_min;
    m_hagl_max = x.m_hagl_max;

    return *this;
}

size_t px4_msgs::msg::VehicleLocalPosition::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += ((2) * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += ((2) * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

size_t px4_msgs::msg::VehicleLocalPosition::getCdrSerializedSize(const px4_msgs::msg::VehicleLocalPosition& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    if ((2) > 0)
    {
        current_alignment += ((2) * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    if ((2) > 0)
    {
        current_alignment += ((2) * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

void px4_msgs::msg::VehicleLocalPosition::serialize(eprosima::fastcdr::Cdr &scdr) const
{

    scdr << m_timestamp;
    scdr << m_timestamp_sample;
    scdr << m_xy_valid;
    scdr << m_z_valid;
    scdr << m_v_xy_valid;
    scdr << m_v_z_valid;
    scdr << m_x;
    scdr << m_y;
    scdr << m_z;
    scdr << m_delta_xy;

    scdr << m_xy_reset_counter;
    scdr << m_delta_z;
    scdr << m_z_reset_counter;
    scdr << m_vx;
    scdr << m_vy;
    scdr << m_vz;
    scdr << m_z_deriv;
    scdr << m_delta_vxy;

    scdr << m_vxy_reset_counter;
    scdr << m_delta_vz;
    scdr << m_vz_reset_counter;
    scdr << m_ax;
    scdr << m_ay;
    scdr << m_az;
    scdr << m_heading;
    scdr << m_delta_heading;
    scdr << m_heading_reset_counter;
    scdr << m_heading_good_for_control;
    scdr << m_xy_global;
    scdr << m_z_global;
    scdr << m_ref_timestamp;
    scdr << m_ref_lat;
    scdr << m_ref_lon;
    scdr << m_ref_alt;
    scdr << m_dist_bottom;
    scdr << m_dist_bottom_valid;
    scdr << m_dist_bottom_sensor_bitfield;
    scdr << m_eph;
    scdr << m_epv;
    scdr << m_evh;
    scdr << m_evv;
    scdr << m_vxy_max;
    scdr << m_vz_max;
    scdr << m_hagl_min;
    scdr << m_hagl_max;
}

void px4_msgs::msg::VehicleLocalPosition::deserialize(eprosima::fastcdr::Cdr &dcdr)
{

    dcdr >> m_timestamp;
    dcdr >> m_timestamp_sample;
    dcdr >> m_xy_valid;
    dcdr >> m_z_valid;
    dcdr >> m_v_xy_valid;
    dcdr >> m_v_z_valid;
    dcdr >> m_x;
    dcdr >> m_y;
    dcdr >> m_z;
    dcdr >> m_delta_xy;

    dcdr >> m_xy_reset_counter;
    dcdr >> m_delta_z;
    dcdr >> m_z_reset_counter;
    dcdr >> m_vx;
    dcdr >> m_vy;
    dcdr >> m_vz;
    dcdr >> m_z_deriv;
    dcdr >> m_delta_vxy;

    dcdr >> m_vxy_reset_counter;
    dcdr >> m_delta_vz;
    dcdr >> m_vz_reset_counter;
    dcdr >> m_ax;
    dcdr >> m_ay;
    dcdr >> m_az;
    dcdr >> m_heading;
    dcdr >> m_delta_heading;
    dcdr >> m_heading_reset_counter;
    dcdr >> m_heading_good_for_control;
    dcdr >> m_xy_global;
    dcdr >> m_z_global;
    dcdr >> m_ref_timestamp;
    dcdr >> m_ref_lat;
    dcdr >> m_ref_lon;
    dcdr >> m_ref_alt;
    dcdr >> m_dist_bottom;
    dcdr >> m_dist_bottom_valid;
    dcdr >> m_dist_bottom_sensor_bitfield;
    dcdr >> m_eph;
    dcdr >> m_epv;
    dcdr >> m_evh;
    dcdr >> m_evv;
    dcdr >> m_vxy_max;
    dcdr >> m_vz_max;
    dcdr >> m_hagl_min;
    dcdr >> m_hagl_max;
}

/*!
 * @brief This function sets a value in member timestamp
 * @param _timestamp New value for member timestamp
 */
void px4_msgs::msg::VehicleLocalPosition::timestamp(uint64_t _timestamp)
{
m_timestamp = _timestamp;
}

/*!
 * @brief This function returns the value of member timestamp
 * @return Value of member timestamp
 */
uint64_t px4_msgs::msg::VehicleLocalPosition::timestamp() const
{
    return m_timestamp;
}

/*!
 * @brief This function returns a reference to member timestamp
 * @return Reference to member timestamp
 */
uint64_t& px4_msgs::msg::VehicleLocalPosition::timestamp()
{
    return m_timestamp;
}

/*!
 * @brief This function sets a value in member timestamp_sample
 * @param _timestamp_sample New value for member timestamp_sample
 */
void px4_msgs::msg::VehicleLocalPosition::timestamp_sample(uint64_t _timestamp_sample)
{
m_timestamp_sample = _timestamp_sample;
}

/*!
 * @brief This function returns the value of member timestamp_sample
 * @return Value of member timestamp_sample
 */
uint64_t px4_msgs::msg::VehicleLocalPosition::timestamp_sample() const
{
    return m_timestamp_sample;
}

/*!
 * @brief This function returns a reference to member timestamp_sample
 * @return Reference to member timestamp_sample
 */
uint64_t& px4_msgs::msg::VehicleLocalPosition::timestamp_sample()
{
    return m_timestamp_sample;
}

/*!
 * @brief This function sets a value in member xy_valid
 * @param _xy_valid New value for member xy_valid
 */
void px4_msgs::msg::VehicleLocalPosition::xy_valid(bool _xy_valid)
{
m_xy_valid = _xy_valid;
}

/*!
 * @brief This function returns the value of member xy_valid
 * @return Value of member xy_valid
 */
bool px4_msgs::msg::VehicleLocalPosition::xy_valid() const
{
    return m_xy_valid;
}

/*!
 * @brief This function returns a reference to member xy_valid
 * @return Reference to member xy_valid
 */
bool& px4_msgs::msg::VehicleLocalPosition::xy_valid()
{
    return m_xy_valid;
}

/*!
 * @brief This function sets a value in member z_valid
 * @param _z_valid New value for member z_valid
 */
void px4_msgs::msg::VehicleLocalPosition::z_valid(bool _z_valid)
{
m_z_valid = _z_valid;
}

/*!
 * @brief This function returns the value of member z_valid
 * @return Value of member z_valid
 */
bool px4_msgs::msg::VehicleLocalPosition::z_valid() const
{
    return m_z_valid;
}

/*!
 * @brief This function returns a reference to member z_valid
 * @return Reference to member z_valid
 */
bool& px4_msgs::msg::VehicleLocalPosition::z_valid()
{
    return m_z_valid;
}

/*!
 * @brief This function sets a value in member v_xy_valid
 * @param _v_xy_valid New value for member v_xy_valid
 */
void px4_msgs::msg::VehicleLocalPosition::v_xy_valid(bool _v_xy_valid)
{
m_v_xy_valid = _v_xy_valid;
}

/*!
 * @brief This function returns the value of member v_xy_valid
 * @return Value of member v_xy_valid
 */
bool px4_msgs::msg::VehicleLocalPosition::v_xy_valid() const
{
    return m_v_xy_valid;
}

/*!
 * @brief This function returns a reference to member v_xy_valid
 * @return Reference to member v_xy_valid
 */
bool& px4_msgs::msg::VehicleLocalPosition::v_xy_valid()
{
    return m_v_xy_valid;
}

/*!
 * @brief This function sets a value in member v_z_valid
 * @param _v_z_valid New value for member v_z_valid
 */
void px4_msgs::msg::VehicleLocalPosition::v_z_valid(bool _v_z_valid)
{
m_v_z_valid = _v_z_valid;
}

/*!
 * @brief This function returns the value of member v_z_valid
 * @return Value of member v_z_valid
 */
bool px4_msgs::msg::VehicleLocalPosition::v_z_valid() const
{
    return m_v_z_valid;
}

/*!
 * @brief This function returns a reference to member v_z_valid
 * @return Reference to member v_z_valid
 */
bool& px4_msgs::msg::VehicleLocalPosition::v_z_valid()
{
    return m_v_z_valid;
}

/*!
 * @brief This function sets a value in member x
 * @param _x New value for member x
 */
void px4_msgs::msg::VehicleLocalPosition::x(float _x)
{
m_x = _x;
}

/*!
 * @brief This function returns the value of member x
 * @return Value of member x
 */
float px4_msgs::msg::VehicleLocalPosition::x() const
{
    return m_x;
}

/*!
 * @brief This function returns a reference to member x
 * @return Reference to member x
 */
float& px4_msgs::msg::VehicleLocalPosition::x()
{
    return m_x;
}

/*!
 * @brief This function sets a value in member y
 * @param _y New value for member y
 */
void px4_msgs::msg::VehicleLocalPosition::y(float _y)
{
m_y = _y;
}

/*!
 * @brief This function returns the value of member y
 * @return Value of member y
 */
float px4_msgs::msg::VehicleLocalPosition::y() const
{
    return m_y;
}

/*!
 * @brief This function returns a reference to member y
 * @return Reference to member y
 */
float& px4_msgs::msg::VehicleLocalPosition::y()
{
    return m_y;
}

/*!
 * @brief This function sets a value in member z
 * @param _z New value for member z
 */
void px4_msgs::msg::VehicleLocalPosition::z(float _z)
{
m_z = _z;
}

/*!
 * @brief This function returns the value of member z
 * @return Value of member z
 */
float px4_msgs::msg::VehicleLocalPosition::z() const
{
    return m_z;
}

/*!
 * @brief This function returns a reference to member z
 * @return Reference to member z
 */
float& px4_msgs::msg::VehicleLocalPosition::z()
{
    return m_z;
}

/*!
 * @brief This function copies the value in member delta_xy
 * @param _delta_xy New value to be copied in member delta_xy
 */
void px4_msgs::msg::VehicleLocalPosition::delta_xy(const px4_msgs::msg::float__2 &_delta_xy)
{
m_delta_xy = _delta_xy;
}

/*!
 * @brief This function moves the value in member delta_xy
 * @param _delta_xy New value to be moved in member delta_xy
 */
void px4_msgs::msg::VehicleLocalPosition::delta_xy(px4_msgs::msg::float__2 &&_delta_xy)
{
m_delta_xy = std::move(_delta_xy);
}

/*!
 * @brief This function returns a constant reference to member delta_xy
 * @return Constant reference to member delta_xy
 */
const px4_msgs::msg::float__2& px4_msgs::msg::VehicleLocalPosition::delta_xy() const
{
    return m_delta_xy;
}

/*!
 * @brief This function returns a reference to member delta_xy
 * @return Reference to member delta_xy
 */
px4_msgs::msg::float__2& px4_msgs::msg::VehicleLocalPosition::delta_xy()
{
    return m_delta_xy;
}
/*!
 * @brief This function sets a value in member xy_reset_counter
 * @param _xy_reset_counter New value for member xy_reset_counter
 */
void px4_msgs::msg::VehicleLocalPosition::xy_reset_counter(uint8_t _xy_reset_counter)
{
m_xy_reset_counter = _xy_reset_counter;
}

/*!
 * @brief This function returns the value of member xy_reset_counter
 * @return Value of member xy_reset_counter
 */
uint8_t px4_msgs::msg::VehicleLocalPosition::xy_reset_counter() const
{
    return m_xy_reset_counter;
}

/*!
 * @brief This function returns a reference to member xy_reset_counter
 * @return Reference to member xy_reset_counter
 */
uint8_t& px4_msgs::msg::VehicleLocalPosition::xy_reset_counter()
{
    return m_xy_reset_counter;
}

/*!
 * @brief This function sets a value in member delta_z
 * @param _delta_z New value for member delta_z
 */
void px4_msgs::msg::VehicleLocalPosition::delta_z(float _delta_z)
{
m_delta_z = _delta_z;
}

/*!
 * @brief This function returns the value of member delta_z
 * @return Value of member delta_z
 */
float px4_msgs::msg::VehicleLocalPosition::delta_z() const
{
    return m_delta_z;
}

/*!
 * @brief This function returns a reference to member delta_z
 * @return Reference to member delta_z
 */
float& px4_msgs::msg::VehicleLocalPosition::delta_z()
{
    return m_delta_z;
}

/*!
 * @brief This function sets a value in member z_reset_counter
 * @param _z_reset_counter New value for member z_reset_counter
 */
void px4_msgs::msg::VehicleLocalPosition::z_reset_counter(uint8_t _z_reset_counter)
{
m_z_reset_counter = _z_reset_counter;
}

/*!
 * @brief This function returns the value of member z_reset_counter
 * @return Value of member z_reset_counter
 */
uint8_t px4_msgs::msg::VehicleLocalPosition::z_reset_counter() const
{
    return m_z_reset_counter;
}

/*!
 * @brief This function returns a reference to member z_reset_counter
 * @return Reference to member z_reset_counter
 */
uint8_t& px4_msgs::msg::VehicleLocalPosition::z_reset_counter()
{
    return m_z_reset_counter;
}

/*!
 * @brief This function sets a value in member vx
 * @param _vx New value for member vx
 */
void px4_msgs::msg::VehicleLocalPosition::vx(float _vx)
{
m_vx = _vx;
}

/*!
 * @brief This function returns the value of member vx
 * @return Value of member vx
 */
float px4_msgs::msg::VehicleLocalPosition::vx() const
{
    return m_vx;
}

/*!
 * @brief This function returns a reference to member vx
 * @return Reference to member vx
 */
float& px4_msgs::msg::VehicleLocalPosition::vx()
{
    return m_vx;
}

/*!
 * @brief This function sets a value in member vy
 * @param _vy New value for member vy
 */
void px4_msgs::msg::VehicleLocalPosition::vy(float _vy)
{
m_vy = _vy;
}

/*!
 * @brief This function returns the value of member vy
 * @return Value of member vy
 */
float px4_msgs::msg::VehicleLocalPosition::vy() const
{
    return m_vy;
}

/*!
 * @brief This function returns a reference to member vy
 * @return Reference to member vy
 */
float& px4_msgs::msg::VehicleLocalPosition::vy()
{
    return m_vy;
}

/*!
 * @brief This function sets a value in member vz
 * @param _vz New value for member vz
 */
void px4_msgs::msg::VehicleLocalPosition::vz(float _vz)
{
m_vz = _vz;
}

/*!
 * @brief This function returns the value of member vz
 * @return Value of member vz
 */
float px4_msgs::msg::VehicleLocalPosition::vz() const
{
    return m_vz;
}

/*!
 * @brief This function returns a reference to member vz
 * @return Reference to member vz
 */
float& px4_msgs::msg::VehicleLocalPosition::vz()
{
    return m_vz;
}

/*!
 * @brief This function sets a value in member z_deriv
 * @param _z_deriv New value for member z_deriv
 */
void px4_msgs::msg::VehicleLocalPosition::z_deriv(float _z_deriv)
{
m_z_deriv = _z_deriv;
}

/*!
 * @brief This function returns the value of member z_deriv
 * @return Value of member z_deriv
 */
float px4_msgs::msg::VehicleLocalPosition::z_deriv() const
{
    return m_z_deriv;
}

/*!
 * @brief This function returns a reference to member z_deriv
 * @return Reference to member z_deriv
 */
float& px4_msgs::msg::VehicleLocalPosition::z_deriv()
{
    return m_z_deriv;
}

/*!
 * @brief This function copies the value in member delta_vxy
 * @param _delta_vxy New value to be copied in member delta_vxy
 */
void px4_msgs::msg::VehicleLocalPosition::delta_vxy(const px4_msgs::msg::float__2 &_delta_vxy)
{
m_delta_vxy = _delta_vxy;
}

/*!
 * @brief This function moves the value in member delta_vxy
 * @param _delta_vxy New value to be moved in member delta_vxy
 */
void px4_msgs::msg::VehicleLocalPosition::delta_vxy(px4_msgs::msg::float__2 &&_delta_vxy)
{
m_delta_vxy = std::move(_delta_vxy);
}

/*!
 * @brief This function returns a constant reference to member delta_vxy
 * @return Constant reference to member delta_vxy
 */
const px4_msgs::msg::float__2& px4_msgs::msg::VehicleLocalPosition::delta_vxy() const
{
    return m_delta_vxy;
}

/*!
 * @brief This function returns a reference to member delta_vxy
 * @return Reference to member delta_vxy
 */
px4_msgs::msg::float__2& px4_msgs::msg::VehicleLocalPosition::delta_vxy()
{
    return m_delta_vxy;
}
/*!
 * @brief This function sets a value in member vxy_reset_counter
 * @param _vxy_reset_counter New value for member vxy_reset_counter
 */
void px4_msgs::msg::VehicleLocalPosition::vxy_reset_counter(uint8_t _vxy_reset_counter)
{
m_vxy_reset_counter = _vxy_reset_counter;
}

/*!
 * @brief This function returns the value of member vxy_reset_counter
 * @return Value of member vxy_reset_counter
 */
uint8_t px4_msgs::msg::VehicleLocalPosition::vxy_reset_counter() const
{
    return m_vxy_reset_counter;
}

/*!
 * @brief This function returns a reference to member vxy_reset_counter
 * @return Reference to member vxy_reset_counter
 */
uint8_t& px4_msgs::msg::VehicleLocalPosition::vxy_reset_counter()
{
    return m_vxy_reset_counter;
}

/*!
 * @brief This function sets a value in member delta_vz
 * @param _delta_vz New value for member delta_vz
 */
void px4_msgs::msg::VehicleLocalPosition::delta_vz(float _delta_vz)
{
m_delta_vz = _delta_vz;
}

/*!
 * @brief This function returns the value of member delta_vz
 * @return Value of member delta_vz
 */
float px4_msgs::msg::VehicleLocalPosition::delta_vz() const
{
    return m_delta_vz;
}

/*!
 * @brief This function returns a reference to member delta_vz
 * @return Reference to member delta_vz
 */
float& px4_msgs::msg::VehicleLocalPosition::delta_vz()
{
    return m_delta_vz;
}

/*!
 * @brief This function sets a value in member vz_reset_counter
 * @param _vz_reset_counter New value for member vz_reset_counter
 */
void px4_msgs::msg::VehicleLocalPosition::vz_reset_counter(uint8_t _vz_reset_counter)
{
m_vz_reset_counter = _vz_reset_counter;
}

/*!
 * @brief This function returns the value of member vz_reset_counter
 * @return Value of member vz_reset_counter
 */
uint8_t px4_msgs::msg::VehicleLocalPosition::vz_reset_counter() const
{
    return m_vz_reset_counter;
}

/*!
 * @brief This function returns a reference to member vz_reset_counter
 * @return Reference to member vz_reset_counter
 */
uint8_t& px4_msgs::msg::VehicleLocalPosition::vz_reset_counter()
{
    return m_vz_reset_counter;
}

/*!
 * @brief This function sets a value in member ax
 * @param _ax New value for member ax
 */
void px4_msgs::msg::VehicleLocalPosition::ax(float _ax)
{
m_ax = _ax;
}

/*!
 * @brief This function returns the value of member ax
 * @return Value of member ax
 */
float px4_msgs::msg::VehicleLocalPosition::ax() const
{
    return m_ax;
}

/*!
 * @brief This function returns a reference to member ax
 * @return Reference to member ax
 */
float& px4_msgs::msg::VehicleLocalPosition::ax()
{
    return m_ax;
}

/*!
 * @brief This function sets a value in member ay
 * @param _ay New value for member ay
 */
void px4_msgs::msg::VehicleLocalPosition::ay(float _ay)
{
m_ay = _ay;
}

/*!
 * @brief This function returns the value of member ay
 * @return Value of member ay
 */
float px4_msgs::msg::VehicleLocalPosition::ay() const
{
    return m_ay;
}

/*!
 * @brief This function returns a reference to member ay
 * @return Reference to member ay
 */
float& px4_msgs::msg::VehicleLocalPosition::ay()
{
    return m_ay;
}

/*!
 * @brief This function sets a value in member az
 * @param _az New value for member az
 */
void px4_msgs::msg::VehicleLocalPosition::az(float _az)
{
m_az = _az;
}

/*!
 * @brief This function returns the value of member az
 * @return Value of member az
 */
float px4_msgs::msg::VehicleLocalPosition::az() const
{
    return m_az;
}

/*!
 * @brief This function returns a reference to member az
 * @return Reference to member az
 */
float& px4_msgs::msg::VehicleLocalPosition::az()
{
    return m_az;
}

/*!
 * @brief This function sets a value in member heading
 * @param _heading New value for member heading
 */
void px4_msgs::msg::VehicleLocalPosition::heading(float _heading)
{
m_heading = _heading;
}

/*!
 * @brief This function returns the value of member heading
 * @return Value of member heading
 */
float px4_msgs::msg::VehicleLocalPosition::heading() const
{
    return m_heading;
}

/*!
 * @brief This function returns a reference to member heading
 * @return Reference to member heading
 */
float& px4_msgs::msg::VehicleLocalPosition::heading()
{
    return m_heading;
}

/*!
 * @brief This function sets a value in member delta_heading
 * @param _delta_heading New value for member delta_heading
 */
void px4_msgs::msg::VehicleLocalPosition::delta_heading(float _delta_heading)
{
m_delta_heading = _delta_heading;
}

/*!
 * @brief This function returns the value of member delta_heading
 * @return Value of member delta_heading
 */
float px4_msgs::msg::VehicleLocalPosition::delta_heading() const
{
    return m_delta_heading;
}

/*!
 * @brief This function returns a reference to member delta_heading
 * @return Reference to member delta_heading
 */
float& px4_msgs::msg::VehicleLocalPosition::delta_heading()
{
    return m_delta_heading;
}

/*!
 * @brief This function sets a value in member heading_reset_counter
 * @param _heading_reset_counter New value for member heading_reset_counter
 */
void px4_msgs::msg::VehicleLocalPosition::heading_reset_counter(uint8_t _heading_reset_counter)
{
m_heading_reset_counter = _heading_reset_counter;
}

/*!
 * @brief This function returns the value of member heading_reset_counter
 * @return Value of member heading_reset_counter
 */
uint8_t px4_msgs::msg::VehicleLocalPosition::heading_reset_counter() const
{
    return m_heading_reset_counter;
}

/*!
 * @brief This function returns a reference to member heading_reset_counter
 * @return Reference to member heading_reset_counter
 */
uint8_t& px4_msgs::msg::VehicleLocalPosition::heading_reset_counter()
{
    return m_heading_reset_counter;
}

/*!
 * @brief This function sets a value in member heading_good_for_control
 * @param _heading_good_for_control New value for member heading_good_for_control
 */
void px4_msgs::msg::VehicleLocalPosition::heading_good_for_control(bool _heading_good_for_control)
{
m_heading_good_for_control = _heading_good_for_control;
}

/*!
 * @brief This function returns the value of member heading_good_for_control
 * @return Value of member heading_good_for_control
 */
bool px4_msgs::msg::VehicleLocalPosition::heading_good_for_control() const
{
    return m_heading_good_for_control;
}

/*!
 * @brief This function returns a reference to member heading_good_for_control
 * @return Reference to member heading_good_for_control
 */
bool& px4_msgs::msg::VehicleLocalPosition::heading_good_for_control()
{
    return m_heading_good_for_control;
}

/*!
 * @brief This function sets a value in member xy_global
 * @param _xy_global New value for member xy_global
 */
void px4_msgs::msg::VehicleLocalPosition::xy_global(bool _xy_global)
{
m_xy_global = _xy_global;
}

/*!
 * @brief This function returns the value of member xy_global
 * @return Value of member xy_global
 */
bool px4_msgs::msg::VehicleLocalPosition::xy_global() const
{
    return m_xy_global;
}

/*!
 * @brief This function returns a reference to member xy_global
 * @return Reference to member xy_global
 */
bool& px4_msgs::msg::VehicleLocalPosition::xy_global()
{
    return m_xy_global;
}

/*!
 * @brief This function sets a value in member z_global
 * @param _z_global New value for member z_global
 */
void px4_msgs::msg::VehicleLocalPosition::z_global(bool _z_global)
{
m_z_global = _z_global;
}

/*!
 * @brief This function returns the value of member z_global
 * @return Value of member z_global
 */
bool px4_msgs::msg::VehicleLocalPosition::z_global() const
{
    return m_z_global;
}

/*!
 * @brief This function returns a reference to member z_global
 * @return Reference to member z_global
 */
bool& px4_msgs::msg::VehicleLocalPosition::z_global()
{
    return m_z_global;
}

/*!
 * @brief This function sets a value in member ref_timestamp
 * @param _ref_timestamp New value for member ref_timestamp
 */
void px4_msgs::msg::VehicleLocalPosition::ref_timestamp(uint64_t _ref_timestamp)
{
m_ref_timestamp = _ref_timestamp;
}

/*!
 * @brief This function returns the value of member ref_timestamp
 * @return Value of member ref_timestamp
 */
uint64_t px4_msgs::msg::VehicleLocalPosition::ref_timestamp() const
{
    return m_ref_timestamp;
}

/*!
 * @brief This function returns a reference to member ref_timestamp
 * @return Reference to member ref_timestamp
 */
uint64_t& px4_msgs::msg::VehicleLocalPosition::ref_timestamp()
{
    return m_ref_timestamp;
}

/*!
 * @brief This function sets a value in member ref_lat
 * @param _ref_lat New value for member ref_lat
 */
void px4_msgs::msg::VehicleLocalPosition::ref_lat(double _ref_lat)
{
m_ref_lat = _ref_lat;
}

/*!
 * @brief This function returns the value of member ref_lat
 * @return Value of member ref_lat
 */
double px4_msgs::msg::VehicleLocalPosition::ref_lat() const
{
    return m_ref_lat;
}

/*!
 * @brief This function returns a reference to member ref_lat
 * @return Reference to member ref_lat
 */
double& px4_msgs::msg::VehicleLocalPosition::ref_lat()
{
    return m_ref_lat;
}

/*!
 * @brief This function sets a value in member ref_lon
 * @param _ref_lon New value for member ref_lon
 */
void px4_msgs::msg::VehicleLocalPosition::ref_lon(double _ref_lon)
{
m_ref_lon = _ref_lon;
}

/*!
 * @brief This function returns the value of member ref_lon
 * @return Value of member ref_lon
 */
double px4_msgs::msg::VehicleLocalPosition::ref_lon() const
{
    return m_ref_lon;
}

/*!
 * @brief This function returns a reference to member ref_lon
 * @return Reference to member ref_lon
 */
double& px4_msgs::msg::VehicleLocalPosition::ref_lon()
{
    return m_ref_lon;
}

/*!
 * @brief This function sets a value in member ref_alt
 * @param _ref_alt New value for member ref_alt
 */
void px4_msgs::msg::VehicleLocalPosition::ref_alt(float _ref_alt)
{
m_ref_alt = _ref_alt;
}

/*!
 * @brief This function returns the value of member ref_alt
 * @return Value of member ref_alt
 */
float px4_msgs::msg::VehicleLocalPosition::ref_alt() const
{
    return m_ref_alt;
}

/*!
 * @brief This function returns a reference to member ref_alt
 * @return Reference to member ref_alt
 */
float& px4_msgs::msg::VehicleLocalPosition::ref_alt()
{
    return m_ref_alt;
}

/*!
 * @brief This function sets a value in member dist_bottom
 * @param _dist_bottom New value for member dist_bottom
 */
void px4_msgs::msg::VehicleLocalPosition::dist_bottom(float _dist_bottom)
{
m_dist_bottom = _dist_bottom;
}

/*!
 * @brief This function returns the value of member dist_bottom
 * @return Value of member dist_bottom
 */
float px4_msgs::msg::VehicleLocalPosition::dist_bottom() const
{
    return m_dist_bottom;
}

/*!
 * @brief This function returns a reference to member dist_bottom
 * @return Reference to member dist_bottom
 */
float& px4_msgs::msg::VehicleLocalPosition::dist_bottom()
{
    return m_dist_bottom;
}

/*!
 * @brief This function sets a value in member dist_bottom_valid
 * @param _dist_bottom_valid New value for member dist_bottom_valid
 */
void px4_msgs::msg::VehicleLocalPosition::dist_bottom_valid(bool _dist_bottom_valid)
{
m_dist_bottom_valid = _dist_bottom_valid;
}

/*!
 * @brief This function returns the value of member dist_bottom_valid
 * @return Value of member dist_bottom_valid
 */
bool px4_msgs::msg::VehicleLocalPosition::dist_bottom_valid() const
{
    return m_dist_bottom_valid;
}

/*!
 * @brief This function returns a reference to member dist_bottom_valid
 * @return Reference to member dist_bottom_valid
 */
bool& px4_msgs::msg::VehicleLocalPosition::dist_bottom_valid()
{
    return m_dist_bottom_valid;
}

/*!
 * @brief This function sets a value in member dist_bottom_sensor_bitfield
 * @param _dist_bottom_sensor_bitfield New value for member dist_bottom_sensor_bitfield
 */
void px4_msgs::msg::VehicleLocalPosition::dist_bottom_sensor_bitfield(uint8_t _dist_bottom_sensor_bitfield)
{
m_dist_bottom_sensor_bitfield = _dist_bottom_sensor_bitfield;
}

/*!
 * @brief This function returns the value of member dist_bottom_sensor_bitfield
 * @return Value of member dist_bottom_sensor_bitfield
 */
uint8_t px4_msgs::msg::VehicleLocalPosition::dist_bottom_sensor_bitfield() const
{
    return m_dist_bottom_sensor_bitfield;
}

/*!
 * @brief This function returns a reference to member dist_bottom_sensor_bitfield
 * @return Reference to member dist_bottom_sensor_bitfield
 */
uint8_t& px4_msgs::msg::VehicleLocalPosition::dist_bottom_sensor_bitfield()
{
    return m_dist_bottom_sensor_bitfield;
}

/*!
 * @brief This function sets a value in member eph
 * @param _eph New value for member eph
 */
void px4_msgs::msg::VehicleLocalPosition::eph(float _eph)
{
m_eph = _eph;
}

/*!
 * @brief This function returns the value of member eph
 * @return Value of member eph
 */
float px4_msgs::msg::VehicleLocalPosition::eph() const
{
    return m_eph;
}

/*!
 * @brief This function returns a reference to member eph
 * @return Reference to member eph
 */
float& px4_msgs::msg::VehicleLocalPosition::eph()
{
    return m_eph;
}

/*!
 * @brief This function sets a value in member epv
 * @param _epv New value for member epv
 */
void px4_msgs::msg::VehicleLocalPosition::epv(float _epv)
{
m_epv = _epv;
}

/*!
 * @brief This function returns the value of member epv
 * @return Value of member epv
 */
float px4_msgs::msg::VehicleLocalPosition::epv() const
{
    return m_epv;
}

/*!
 * @brief This function returns a reference to member epv
 * @return Reference to member epv
 */
float& px4_msgs::msg::VehicleLocalPosition::epv()
{
    return m_epv;
}

/*!
 * @brief This function sets a value in member evh
 * @param _evh New value for member evh
 */
void px4_msgs::msg::VehicleLocalPosition::evh(float _evh)
{
m_evh = _evh;
}

/*!
 * @brief This function returns the value of member evh
 * @return Value of member evh
 */
float px4_msgs::msg::VehicleLocalPosition::evh() const
{
    return m_evh;
}

/*!
 * @brief This function returns a reference to member evh
 * @return Reference to member evh
 */
float& px4_msgs::msg::VehicleLocalPosition::evh()
{
    return m_evh;
}

/*!
 * @brief This function sets a value in member evv
 * @param _evv New value for member evv
 */
void px4_msgs::msg::VehicleLocalPosition::evv(float _evv)
{
m_evv = _evv;
}

/*!
 * @brief This function returns the value of member evv
 * @return Value of member evv
 */
float px4_msgs::msg::VehicleLocalPosition::evv() const
{
    return m_evv;
}

/*!
 * @brief This function returns a reference to member evv
 * @return Reference to member evv
 */
float& px4_msgs::msg::VehicleLocalPosition::evv()
{
    return m_evv;
}

/*!
 * @brief This function sets a value in member vxy_max
 * @param _vxy_max New value for member vxy_max
 */
void px4_msgs::msg::VehicleLocalPosition::vxy_max(float _vxy_max)
{
m_vxy_max = _vxy_max;
}

/*!
 * @brief This function returns the value of member vxy_max
 * @return Value of member vxy_max
 */
float px4_msgs::msg::VehicleLocalPosition::vxy_max() const
{
    return m_vxy_max;
}

/*!
 * @brief This function returns a reference to member vxy_max
 * @return Reference to member vxy_max
 */
float& px4_msgs::msg::VehicleLocalPosition::vxy_max()
{
    return m_vxy_max;
}

/*!
 * @brief This function sets a value in member vz_max
 * @param _vz_max New value for member vz_max
 */
void px4_msgs::msg::VehicleLocalPosition::vz_max(float _vz_max)
{
m_vz_max = _vz_max;
}

/*!
 * @brief This function returns the value of member vz_max
 * @return Value of member vz_max
 */
float px4_msgs::msg::VehicleLocalPosition::vz_max() const
{
    return m_vz_max;
}

/*!
 * @brief This function returns a reference to member vz_max
 * @return Reference to member vz_max
 */
float& px4_msgs::msg::VehicleLocalPosition::vz_max()
{
    return m_vz_max;
}

/*!
 * @brief This function sets a value in member hagl_min
 * @param _hagl_min New value for member hagl_min
 */
void px4_msgs::msg::VehicleLocalPosition::hagl_min(float _hagl_min)
{
m_hagl_min = _hagl_min;
}

/*!
 * @brief This function returns the value of member hagl_min
 * @return Value of member hagl_min
 */
float px4_msgs::msg::VehicleLocalPosition::hagl_min() const
{
    return m_hagl_min;
}

/*!
 * @brief This function returns a reference to member hagl_min
 * @return Reference to member hagl_min
 */
float& px4_msgs::msg::VehicleLocalPosition::hagl_min()
{
    return m_hagl_min;
}

/*!
 * @brief This function sets a value in member hagl_max
 * @param _hagl_max New value for member hagl_max
 */
void px4_msgs::msg::VehicleLocalPosition::hagl_max(float _hagl_max)
{
m_hagl_max = _hagl_max;
}

/*!
 * @brief This function returns the value of member hagl_max
 * @return Value of member hagl_max
 */
float px4_msgs::msg::VehicleLocalPosition::hagl_max() const
{
    return m_hagl_max;
}

/*!
 * @brief This function returns a reference to member hagl_max
 * @return Reference to member hagl_max
 */
float& px4_msgs::msg::VehicleLocalPosition::hagl_max()
{
    return m_hagl_max;
}


size_t px4_msgs::msg::VehicleLocalPosition::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
    size_t current_align = current_alignment;
















































    return current_align;
}

bool px4_msgs::msg::VehicleLocalPosition::isKeyDefined()
{
   return false;
}

void px4_msgs::msg::VehicleLocalPosition::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
    (void) scdr;
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
}


